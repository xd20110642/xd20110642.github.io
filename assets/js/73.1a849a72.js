(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{341:function(t,e,o){"use strict";o.r(e);var n=o(22),r=Object(n.a)({},function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h3",{attrs:{id:"objectes6新增属性-再次学习"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#objectes6新增属性-再次学习","aria-hidden":"true"}},[t._v("#")]),t._v(" ObjectES6新增属性(再次学习)")]),t._v(" "),o("ul",[o("li",[o("p",[o("code",[t._v("Object.is(参数1,参数2)")]),t._v(" 判断值是否严格相等")]),t._v(" "),o("pre",[o("code",[t._v("  Object.is('foo','foo')  ===> true\t\n  Object.is(NaN,NaN)  ===> true\t\n")])])]),t._v(" "),o("li",[o("p",[o("code",[t._v("Object.assign(目标对象,源对象)")]),t._v(" 用于对象的合并 将源对象（source）的所有可枚举属性，复制到目标对象（target）。")]),t._v(" "),o("pre",[o("code",[t._v("  const target={a:1} const source1 = { b: 2 };\n  Object.assign(target, source1);\n  target // {a:1, b:2}\n  如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性\n  实行的是浅拷贝，而不是深拷贝\n  const obj1 = {a: {b: 1}};\n  const obj2 = Object.assign({}, obj1);\n  \n  obj1.a.b = 2;\n  obj2.a.b // 2\n")])])]),t._v(" "),o("li",[o("p",[o("code",[t._v("Object.setPrototypeOf()（写操作）")]),t._v("用来设置一个对象的prototype对象，返回参数对象本身 （是 ES6 正式推荐的设置原型对象的方法）")]),t._v(" "),o("pre",[o("code",[t._v("  // 格式\n  Object.setPrototypeOf(object, prototype);\n\n  let proto={}\n  let obj={x:10}\n  Object.setPrototypeOf(obj,proto);===> obj.__proto__=proto 也等于obj.prototype=proto\n  proto.y=20 proto.x=10;\n  \n  obj.x // ===> 10 这个在obj自己身上 没有 那么就往其原型上查找 现在原型是 proto 而proto自身本身有 所以就能打印出10\n  感觉类似于\n  obj.prototype={\n  \ty:20，\n  \tX:10\n  }\n")])]),t._v(" "),o("ul",[o("li",[t._v("如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。")]),t._v(" "),o("li",[t._v("由于"),o("code",[t._v("undefine")]),t._v("d和"),o("code",[t._v("null")]),t._v("无法转为对象，所以如果第一个参数是"),o("code",[t._v("undefined")]),t._v("或"),o("code",[t._v("null")]),t._v("，就会报错。")])])]),t._v(" "),o("li",[o("p",[o("code",[t._v("Object.getPrototypeOf(obj)")]),t._v("读取一个对象的原型对象。")]),t._v(" "),o("pre",[o("code",[t._v("  Object.getPrototypeOf(实例对象)\n  function Rectangle() {\n    // ...\n  }\n  \n  const rec = new Rectangle();\n  \n  Object.getPrototypeOf(rec) === Rectangle.prototype === rec.__proto__")])])])])])},[],!1,null,null,null);e.default=r.exports}}]);