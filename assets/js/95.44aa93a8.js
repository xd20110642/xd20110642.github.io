(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{364:function(e,t,n){"use strict";n.r(t);var _=n(22),v=Object(_.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"node中的全局变量和常用模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node中的全局变量和常用模块","aria-hidden":"true"}},[e._v("#")]),e._v(" node中的全局变量和常用模块")]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[n("p",[e._v("全局变量:在任何js文件的任何地方都可以使用的变量。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("__dirname")]),e._v(":当前文件的目录 "),n("strong",[e._v("(重要)")])]),e._v(" "),n("li",[n("code",[e._v("__filename")]),e._v(":当前文件的绝对路径 "),n("strong",[e._v("(重要)")])]),e._v(" "),n("li",[n("code",[e._v("console")]),e._v(":控制台对象，可以输出信息")]),e._v(" "),n("li",[n("code",[e._v("process")]),e._v(":进程对象,可以获取进程的相关信息,环境变量等等 "),n("strong",[e._v("(重要)")])]),e._v(" "),n("li",[n("code",[e._v("setTimeout/clearTimeout")]),e._v(":延迟执行")]),e._v(" "),n("li",[n("code",[e._v("setInterval/clearInterval")]),e._v(":定时器")])])]),e._v(" "),n("li",[n("p",[e._v("path模块:path模块供了一些工具函数，用于处理文件与目录的路径")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("path.basename")]),e._v(":返回一个路径的最后一部分")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("path.dirname")]),e._v(":返回一个路径的目录名")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("path.extname")]),e._v(":返回一个路径的扩展名")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("path.join")]),e._v(":用于拼接给定的路径片段 "),n("strong",[e._v("重要 路径进行规范化")])]),e._v(" "),n("pre",[n("code",[e._v("const path=require('path');\n//设置别名\nfunction resolve(dir) {\n    //__dirname 返回当前文件的路径\n    return path.join(__dirname, './', dir)\n}\n//假设 __dirname == test/\nresolve('src') ===>  return path.join('当前文件路径','./','src')\n// ./会被规范化\n    test/src   ===> 这个就是设置别名的原理\n")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("path.normalize")]),e._v(":将一个路径正常化")])])])]),e._v(" "),n("li",[n("p",[e._v("fs模块")]),e._v(" "),n("ul",[n("li",[e._v("fs.stat/fs.statSync：访问文件的元数据，比如文件大小，文件的修改时间")]),e._v(" "),n("li",[e._v("fs.readFile/fs.readFileSync：异步/同步读取文件")]),e._v(" "),n("li",[e._v("fs.writeFile/fs.writeFileSync：异步/同步写入文件")]),e._v(" "),n("li",[e._v("fs.readdir/fs.readdirSync：读取文件夹内容")]),e._v(" "),n("li",[e._v("fs.unlink/fs.unlinkSync：删除文件")]),e._v(" "),n("li",[e._v("fs.rmdir/fs.rmdirSync：只能删除空文件夹，思考：如何删除非空文件夹？\n使用fs-extra 第三方模块来删除。")]),e._v(" "),n("li",[e._v("fs.watchFile：监视文件的变化")])])]),e._v(" "),n("li",[n("p",[e._v("event模块:其中某些类型的对象（触发器）会周期性地触发命名事件来调用函数对象（监听器）")]),e._v(" "),n("pre",[n("code",[e._v("  const EventEmitter = require('events')\n  class MyEmitter extends EventEmitter{}\n\n  const myEmitter = new MyEmitter()\n  // 注册xxx事件\n  myEmitter.on('aaa', (a)=>{\n      console.log('aaa事件被触发，参数：'+a);\n  })\n  // 1秒钟之后触发aaa事件，并传递参数\n  setTimeout(()=>{\n      myEmitter.emit('aaa', 'aaaaaa')\n  },1000)\n")])])])])])},[],!1,null,null,null);t.default=v.exports}}]);