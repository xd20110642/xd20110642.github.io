(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{369:function(r,e,a){"use strict";a.r(e);var t=a(22),n=Object(t.a)({},function(){var r=this,e=r.$createElement,a=r._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h3",{attrs:{id:"javascript基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript基础","aria-hidden":"true"}},[r._v("#")]),r._v(" JavaScript基础")]),r._v(" "),a("ul",[a("li",[r._v("null 表示变量没有值 undefined标识变量已被声明，但是没有赋值")])]),r._v(" "),a("hr"),r._v(" "),a("h3",{attrs:{id:"数组的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的操作","aria-hidden":"true"}},[r._v("#")]),r._v(" 数组的操作")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("splice 删除指定位置的数组元素和添加 会修改原数组")]),r._v(" "),a("pre",[a("code",[r._v("  let arr=[1,2,3,4,5]\n  arr.splice(从什么地方开始删除,需要删除多少,(可选)添加多少元素)\n  arr.splice(0,1) //代表从第一个开始删除  删除一个元素 返回的是被减去的数组 \n  arr.splice(0,0,1,2,3) //代表从第一个开始 删除0个 插入后面的数字\n")])])]),r._v(" "),a("li",[a("p",[r._v("合并数组")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("concat 合并数组 如果只有一层数据源 那么就是深拷贝  否则就是浅拷贝")]),r._v(" "),a("pre",[a("code",[r._v("  let arr=[1,,2,3]\n  let arr2=arr.concat() \n  arr2[2]=1 === arr[2] //fasle 这样基本的数据源是深拷贝 \n\n  let arr=[{name:1}]\n  let arr2=arr.concat()\n  arr2[0].name=1 ===arr[0].name //true 这样是浅拷贝\n")])])])])]),r._v(" "),a("li",[a("p",[r._v("迭代函数")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("every函数  对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true")])]),r._v(" "),a("li",[a("p",[r._v("some方法   对数组中的每一项运行给定函数，如果任一项返回true，则返回true")])]),r._v(" "),a("li",[a("p",[r._v("forEach方法 对数组中的每一项运行给定函数。这个方法没有返回值(就是for循环的封装版本)")])]),r._v(" "),a("li",[a("p",[r._v("map方法  对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组(会返回一个新数组)")])]),r._v(" "),a("li",[a("p",[r._v("filter方法 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组(返回符合我们条件的数组)")]),r._v(" "),a("pre",[a("code",[r._v("  let arr=[1,2,3,4]\n  // 不能使用结果 加上小括号就是返回值了\n  arr.some(函数名)\n")])])])])])])])},[],!1,null,null,null);e.default=n.exports}}]);