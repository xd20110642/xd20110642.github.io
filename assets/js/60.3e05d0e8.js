(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{328:function(n,t,a){"use strict";a.r(t);var r=a(22),e=Object(r.a)({},function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"js内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js内存管理","aria-hidden":"true"}},[n._v("#")]),n._v(" js内存管理")]),n._v(" "),a("h3",{attrs:{id:"js内存管理机制-浅拷贝和深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js内存管理机制-浅拷贝和深拷贝","aria-hidden":"true"}},[n._v("#")]),n._v(" js内存管理机制&&浅拷贝和深拷贝")]),n._v(" "),a("p",[n._v("1.内存空间为：栈、堆、池； 其中\t\t"),a("strong",[n._v("栈存放变量")]),n._v(" "),a("strong",[n._v("堆存放复杂对象")]),n._v(" "),a("strong",[n._v("池存放常量")])]),n._v(" "),a("p",[n._v("2.js的基础数据都保存在栈内存中， ------\x3e 遵循 先进后出,后进先出的原则")]),n._v(" "),a("p",[n._v("基础类型：Number、String、null、Undefined、Boolean")]),n._v(" "),a("p",[n._v("3.堆内存和栈内存的区别，引用数据类型与堆内存 例如：数组和对象")]),n._v(" "),a("p",[a("strong",[n._v("引用数据类型的值是保存在堆内存中的对象。")]),n._v(" "),a("strong",[n._v("引用类型的值都是按引用访问的。")]),n._v(" "),a("strong",[n._v("引用类型赋值是将地址给它的，所以是2个变量指向的是一个地址  所以修改了一个 就会全部改变")]),n._v("\n为了更好的搞懂栈内存与堆内存，我们可以结合以下例子与图解进行理解。\nvar a1 = 0; // 栈\nvar a2 = 'this is string'; // 栈\nvar a3 = null; // 栈\nvar b = { m: 20 }; // 变量b存在于栈中，{m: 20} 作为对象存在于堆内存中\nvar c = [1, 2, 3]; // 变量c存在于栈中，[1, 2, 3] 作为对象存在于堆内存中")]),n._v(" "),a("pre",[a("code",[n._v("变量名\t具体值\nc\t0x0012ff7d\nb\t0x0012ff7c\na3\tnull\na2\tthis is string\na1\t0\n")])]),n._v(" "),a("p",[n._v("4.浅拷贝和深拷贝:")]),n._v(" "),a("p",[n._v("浅拷贝还是会影响到我们拷贝的对象,深拷贝就不会影响到我们拷贝的对象")]),n._v(" "),a("p",[n._v("浅拷贝：按地址传递     深拷贝：按值传递")]),n._v(" "),a("pre",[a("code",[n._v("浅拷贝  这样修改b2 也会对a2造成影响\n\tlet a2={a:1,b:2};\nfunction Copy(a){\n    var c={};//生成一个空对象,来杜绝和a2的联系\n    for (let i in a) {\n       c[i]=a[i];\n    }\nreturn c;\n}\nlet b2=Copy(a2);\nb2.a=3; //这里b2={a:3,b:2}  a2={a:3,b:2}\n")])]),n._v(" "),a("p",[n._v("深拷贝 一句话代码")]),n._v(" "),a("pre",[a("code",[n._v("function cloneJSON(source) {\nreturn JSON.parse(JSON.stringify(source));\n}\n这样就不会影响到 我们拷贝的数组\n\nlet a={a:1,b:2}\nlet b=cloneJSON(a)\nb.a=3//  b={a:3,b:2}  a={a:1,b:2}   ")])])])},[],!1,null,null,null);t.default=e.exports}}]);