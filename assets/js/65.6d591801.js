(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{334:function(e,t,r){"use strict";r.r(t);var n=r(22),c=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"reflect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reflect","aria-hidden":"true"}},[e._v("#")]),e._v(" reflect")]),e._v(" "),r("hr"),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("Reflect")]),e._v("是一个内置的对象，提供拦截js操作方法,ES6 为了操作对象而提供的新 API")]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("Reflect")]),e._v("不是一个函数对象，因此它是不可构造的")])]),e._v(" "),r("li",[r("p",[r("code",[e._v("Reflect")]),e._v("的所有的方法都是静态的就和"),r("code",[e._v("Math")]),e._v("一样")]),e._v(" "),r("pre",[r("code",[e._v("Math.round() 直接使用 而不需new 一个math 对象出来\n同理\nReflect.get(xx,xx,xx)\n")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("Reflect")]),e._v("对象的方法与"),r("code",[e._v("Proxy")]),e._v("对象的方法相同。")])])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("Reflect")]),e._v(" 一共有13个静态方法")]),e._v(" "),r("ul",[r("li",[e._v("它可以分为一部分是是原来存在"),r("code",[e._v("Object")]),e._v("上的方法，将它转义到了"),r("code",[e._v("Reflect")]),e._v("上，并作了小改动，让方法更加合理。")]),e._v(" "),r("li",[e._v("另一部分是将原来操作符的功能\n"),r("ul",[r("li",[e._v("has(target, key) 与in操作符一样，让判断操作都变成函数行为。")])])])])]),e._v(" "),r("li",[r("p",[e._v("Reflect.get(target, name, receiver):"),r("code",[e._v("Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。第一个参数为对象")])]),e._v(" "),r("pre",[r("code",[e._v("      var myObject = {\n          foo: 1,\n          bar: 2,\n          get baz() {\n              return this.foo + this.bar;\n          },\n      }\n\n      Reflect.get(myObject, 'foo') // 1\n      Reflect.get(myObject, 'bar') // 2\n      Reflect.get(myObject, 'baz') // 3\n      如果name属性部署了读取函数（getter），则读取函数的this绑定receiver。\n      var myObject = {\n      foo: 1,\n      bar: 2,\n      get baz() {\n          return this.foo + this.bar;\n      },\n      };\n\n      var myReceiverObject = {\n      foo: 4,\n      bar: 4,\n      };\n\n      Reflect.get(myObject, 'baz', myReceiverObject) // 8\n      如果第一个参数不是对象，Reflect.get方法会报错。\n      Reflect.get(1, 'foo') // 报错\n")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("Reflect.defineProperty(target, propertyKey, attributes)")]),e._v(":用于给对象定义属性(等同于"),r("code",[e._v("Object.defineProperty")]),e._v(")")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("Object.defineProperty()")]),e._v("的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性")]),e._v(" "),r("li",[e._v("Object.defineProperty(obj, prop, desc)\n"),r("ul",[r("li",[r("p",[e._v("obj 需要定义属性的当前对象")])]),e._v(" "),r("li",[r("p",[e._v("prop 当前需要定义的属性名")])]),e._v(" "),r("li",[r("p",[e._v("desc 属性描述符")]),e._v(" "),r("pre",[r("code",[e._v("       let Person = {}\n       Object.defineProperty(Person, 'name', {\n       value: 'jack',\n       writable: true // 是否可以改变\n       })\n")])])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/8fe1382ba135",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.jianshu.com/p/8fe1382ba135"),r("OutboundLink")],1)])])])])])]),e._v(" "),r("li",[r("p",[e._v("参考文章")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/reflect",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://es6.ruanyifeng.com/#docs/reflect"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5c7e6857e51d4542194f8c6f",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://juejin.im/post/5c7e6857e51d4542194f8c6f"),r("OutboundLink")],1)])])])])])},[],!1,null,null,null);t.default=c.exports}}]);