(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{381:function(n,t,e){"use strict";e.r(t);var r=e(22),s=Object(r.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"nexttick异步更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexttick异步更新","aria-hidden":"true"}},[n._v("#")]),n._v(" nextTick异步更新")]),n._v(" "),e("ul",[e("li",[n._v("vue的DOM更新是异步的\n"),e("ul",[e("li",[n._v("是先数据更新完毕 然后没有其他数据改变了 那么才开始更新DOM "),e("strong",[n._v("修改数据不会立刻修改DOM")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("如果我们在更新数据完毕以后 需要获取被修改的DOM值 就需要使用nextTick异步获取实时更新的数据")]),n._v(" "),e("pre",[e("code",[n._v("  data(){\n      return{\n          mess:'456'\n      }\n  }\n\n  aa(){\n      this.mess='123';\n      这个时候 页面上显示的数据 已经被修改为了 123  但是我们通过\n      const box=document.querySelector(xx).innerHTML \n      获取到的值 依旧是没有被修改前的值 也就是456 \n      因为vue更新DOM是异步的  这个时候 还没有修改DOM值 只是修改了 响应式数据\n      如果要获取到被修改的DOM需要使用\n      this.$nextTick(() => {\n          这样就可以获取到了 实时的数据\n      })\n  }")])])])])])])])])])},[],!1,null,null,null);t.default=s.exports}}]);