(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{348:function(o,t,n){"use strict";n.r(t);var e=n(22),_=Object(e.a)({},function(){var o=this,t=o.$createElement,n=o._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[n("h3",{attrs:{id:"梳理和总结原型和原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#梳理和总结原型和原型链","aria-hidden":"true"}},[o._v("#")]),o._v(" 梳理和总结原型和原型链")]),o._v(" "),n("ul",[n("li",[n("p",[o._v("只有函数有"),n("code",[o._v("prototype")]),o._v(" 在函数被创建的时候 V8引擎就会自动的添加 "),n("code",[o._v("prototype属性 (是一个对象 值是constructor(构造函数))")])])]),o._v(" "),n("li",[n("p",[n("code",[o._v("__proto__")]),o._v("：是"),n("code",[o._v("对象的实例")]),o._v("和"),n("code",[o._v("构造函数")]),o._v("建立的连续")]),o._v(" "),n("pre",[n("code",[o._v("  实例对象.__proto__   <=====> 构造函数.prototype\n")])])]),o._v(" "),n("li",[n("p",[n("code",[o._v("new")]),o._v("操作符做了什么")]),o._v(" "),n("pre",[n("code",[o._v("  第一步:生成一个临时对象 并且构造函数的this指向 这个临时对象 var _obj={}   _obj=this;\n  第二步:设置临时对象的__proto__属性 指向 构造函数的prototype _obj.__proto__=fn.prototype\n  第三步:给临时对象添加 我们定义的 属性和方法 this.name=11\n  第4步:隐式返回 这个临时对象  如果 我们显式的返回一个 对象 那么通过new 出来得到的就是 我们显式返回的对象  如果是返回基本类型  那么也会隐式返回这个临时对象\n  function Person(){\n      //第一步: var _obj={} _obj=this;\n      //第二步 _obj.__proto__=this.prototype\n      //第三步 _obj.name='xx'\n      //第四步  return _obj; \n  }\n")])])]),o._v(" "),n("li",[n("p",[o._v("原型链:如果试图访问对象(实例)的某个属性,会首先在对象内部寻找该属性,直至找不到,然后才在该对象的原型(instance.prototype)里去找这个属性，以此类推。")]),o._v(" "),n("pre",[n("code",[o._v("  funtion Person(){\n      this.name='123';\n  }\n  Person.prototype.age=45;\n  Object.prototype.sex='男'；\n  let person=new Person();\n  \n  person.name;//===> 123 自己有 就不会继续往上面寻找了\n  person.age;// ===> 45 自己没有 那么就继续往 构造函数的原型上去找 找到了 那么就不会继续往上查找\n  person.sex;// ===> '男' 自己没有 构造函数的原型也没有  但是构造函数的原型也指向一个原型 也就是Object.prototype 找到了 就返回 如果还没有那么就会返回错误 未定义\n  综上所述：就构成了一个链条的查询  也就是原型链 这个过程是不可逆的  只能由实例对象 往上查找  不能由上往实例对象查找 \n  通俗易懂版本:实例对象是孙子  构造函数是 爸爸  对象的原型是 爷爷 \n  孙子能向 爸爸 和爷爷要钱 反过来是不行的\n")])]),o._v(" "),n("img",{attrs:{src:"https://www.crazyming.com/wp-content/uploads/2019/10/201606071535566.jpg"}})])])])},[],!1,null,null,null);t.default=_.exports}}]);