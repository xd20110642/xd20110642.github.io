(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{296:function(e,n,s){"use strict";s.r(n);var t=s(22),r=Object(t.a)({},function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"axios并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#axios并发","aria-hidden":"true"}},[e._v("#")]),e._v(" axios并发")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("并发")]),e._v(" "),s("pre",[s("code",[e._v("  function getUserAccount() {\n      return axios.get('/user/12345');\n  }\n\n  function getUserPermissions() {\n      return axios.get('/user/12345/permissions');\n  }\n  let req=[getUserAccount(), getUserPermissions()]\n  axios.all(...req)//拓展运算符 rest参数的逆运算\n  .then(axios.spread((...res)) {\n      // 两个请求现在都执行完成\n  }));\n\n  ====\n\n  let req=[getUserAccount(),getUserPermissions()]\n     \n axios.spread((...all) => {\n      //all代表了传入的全部参数 也就是rest参数 all并且也是一个数组\n })\n")])])]),e._v(" "),s("li",[s("p",[e._v("promise原生并发")]),e._v(" "),s("pre",[s("code",[e._v('     test1(){\n         return new Promise(resolve => {\n             console.log("第一")\n             setTimeout(() => {\n                 resolve("你好")\n             },5000)\n         })\n         },\n         test2(){\n         return new Promise(resolve => {\n             console.log("第二")\n             setTimeout(() => {\n                 resolve("你好2")\n             },8000)\n         })\n         },  \n         //执行并发\n         test(){\n             let a=[this.test1(),this.test2()]\n             console.log("执行到了")\n             return Promise.all(a)\n         }\n         // 获取到并发请求\n         this.test().then((res) => {\n         console.log("end")\n         console.log("...res",res)\n         })\n')])])])])])},[],!1,null,null,null);n.default=r.exports}}]);