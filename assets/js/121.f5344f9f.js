(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{390:function(e,n,t){"use strict";t.r(n);var a=t(22),v=Object(a.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"vue3-0第一次学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue3-0第一次学习","aria-hidden":"true"}},[e._v("#")]),e._v(" vue3.0第一次学习")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("setup 唯一入口函数 return 返回的值 才能挂载到模板上")]),e._v(" "),t("pre",[t("code",[e._v("  props:{//父子组件通信\n  \n  }\n  //context 就相当于2.x的this里面的 attrs, emit, parent, refs, root, slots  实例属性\n  \n  setup(props,context){\n  \n  }\n")])])]),e._v(" "),t("li",[t("p",[e._v("value是一个函数 返回 响应式包装属性")]),e._v(" "),t("pre",[t("code",[e._v("  const count=value(0) \n")])]),e._v(" "),t("p",[t("strong",[e._v("在使用的时候 需要.value来获取到值  但是在模板里面 就不用写.value就可以访问到")])]),e._v(" "),t("p",[t("strong",[e._v("包装对象被作为另一个响应式对象的属性引用的时候也会被自动展开")])])]),e._v(" "),t("li",[t("p",[e._v("计算属性 返回的值也是包装属性")]),e._v(" "),t("p",[e._v("computed(getter: Function, setter?: Function): Wrapper\n"),t("strong",[e._v("定义一个计算属性就必须再次声明一个计算属性的函数 必须函数表达式")])]),e._v(" "),t("pre",[t("code",[e._v("  const aaa=computed(\n  // getter\n  ()=>{\n  return count.value\n  },\n  //set 就是给计算属性赋值的时候 使用\n  (newvalue) => {\n  \n  })\n  aaa也是一个包装对象 读取值 和使用值就是 aaa.value\n")])])]),e._v(" "),t("li",[t("p",[e._v("监听属性 声明了会立即执行")]),e._v(" "),t("pre",[t("code",[e._v("  watch(source: Wrapper | () => any, callback: (newVal, oldVal), options?: WatchOption): Function\n")])]),e._v(" "),t("p",[t("strong",[e._v("数据来源 就是第一个参数")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("一个返回任意值的函数")])]),e._v(" "),t("li",[t("p",[e._v("一个包装对象 (不需要.value)")])]),e._v(" "),t("li",[t("p",[e._v("一个包含上述两种数据源的数组")]),e._v(" "),t("p",[e._v("watch(\naaa,\n(value,oldvalue) => {\nconsol\n},\n{layz:true}\n)")])]),e._v(" "),t("li",[t("p",[e._v("观察多个数据源")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("任意一个数据源改变，回调函数都会触发")]),e._v(" "),t("pre",[t("code",[e._v("  watch(\n    [valueA, () => valueB.value],//里面有2个数据源 一个是包装对象 一个返回的函数\n    ([a, b], [prevA, prevB]) => { //第一个数组是valueA的回调函数  后面同理\n      console.log(`a is: ${a}`)\n      console.log(`b is: ${b}`)\n    }\n  )\n")])])])])])])]),e._v(" "),t("li",[t("p",[e._v("生命周期函数")]),e._v(" "),t("pre",[t("code",[e._v("  onCreate(() => {        onCreate(函数名)\n  \t函数           或     \n  \n  })\n")])])]),e._v(" "),t("li",[t("p",[e._v("参考文章:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5d40e6276fb9a06ad16f4cc9#heading-12",target:"_blank",rel:"noopener noreferrer"}},[e._v("掘金"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/vuejs/vue-function-api/blob/master/README.zh-CN.md#Context",target:"_blank",rel:"noopener noreferrer"}},[e._v("vuegithub"),t("OutboundLink")],1)])])])])])},[],!1,null,null,null);n.default=v.exports}}]);