(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{419:function(n,t,e){"use strict";e.r(t);var s=e(22),a=Object(s.a)({},function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h3",{attrs:{id:"小程序原生封装组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小程序原生封装组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 小程序原生封装组件")]),this._v(" "),t("pre",[t("code",[this._v("    // 自定义组件   如果有页面在的话 是执行组件的生命周期 在执行的页面的生命周期\n    Component({\n    // 相当于props\n    properties:{\n        mess:{\n        type:String,\n        value:''\n        }\n    },\n    data:{\n        Arr:[1,2,3,5]\n    },\n    // 相当于watch\n    observers:{\n        'mess'(value){\n        console.log(\"数据监听的watch\", value)\n        }\n    },\n    //\n    methods:{\n        // 自定义组件触发事件时，需要使用 triggerEvent 方法，指定事件名、detail对象和事件选项：\n        onTop(){\n        // var myEventDetail = {} // detail对象，提供给事件监听函数\n        // var myEventOption = {} // 触发事件的选项\n        // this.triggerEvent('myevent', myEventDetail, myEventOption)\n        this.triggerEvent('myevent',{name:'代代大师兄'},{})\n        }\n    },\n    lifetimes:{\n        // 初始化生命周期 this.setDate没有被实例化\n        created() {\n        this.xd = \"wdm\";\n        console.log(\"lalal\")\n        },\n        // 实例化组件  进入页面的组件树 生成的组件实例可以在组件的方法、生命周期函数和属性 observer 中通过 this 访问\n        // this.data是获取定义在组件里面使用的 data \n        // this.dataset 是获取定义在组件节点上的数据 例如 <c data-son='wsc'></c> 那么获取到的就是wsc\n        attached() {\n        console.log(this.data, this.dataset,'this.dataset')\n        console.log(this, 'this')\n        },\n    },\n\n    // 组件所在页面的生命周期\n    pageLifetimes:{\n        // page页面\n        show(){\n        console.log(\"页面被展示了\")\n        },\n        hide(){\n        \n        }\n    } \n    })")])])])},[],!1,null,null,null);t.default=a.exports}}]);